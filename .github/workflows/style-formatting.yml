name: Style & Formatting

on:
  workflow_dispatch:
  pull_request:
    branches: [main]
  create:

jobs:
  style-and-formatting:
    runs-on: ubuntu-latest
    permissions: write-all
    env:
      FMT_COMMIT_MSG: (CI) - Formatted Code - RustFmt - ${{github.action}} - ${{github.sha}}
      AFTER_TEST_COMMIT_MSG: (CI) - After Test Cleanup
      FMT_CHECK_RESULT: fmt_check.txt
      FMT_CODE_RESULT: fmt_code.txt
      CLIPPY_RESULT: clippy.txt

    steps:
      - name: Is New Review Branch
        run: |
          echo "(*) Not A Review Branch, Exit"
          if ["${{github.ref}}" == *"review"*]; then
            exit 1
          else
            echo "Continue"
          fi

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{secrets.GITHUB_TOKEN}}
      

      - name: Install Toolchain (Rust Nightly)
        run: |

          echo "### (*) Installing Rustup :rocket:" >> $GITHUB_STEP_SUMMARY
          curl https://sh.rustup.rs -sSf -y | sh -s
          rustup toolchain install nightly --component miri

      - name: Check Formatting
        id: check-formatting
        run: |
          cargo fmt -- --check >> ${{env.FMT_CHECK_RESULT}}
          cat ${{env.FMT_CHECK_RESULT}}
        continue-on-error: true

      - name: Format Code
        id: format-code
        run: |
          echo "(*) Formatting Code... :clock2:" >> $GITHUB_STEP_SUMMARY
          cargo fmt >> ${{env.FMT_CODE_RESULT}}
          cat ${{env.FMT_CODE_RESULT}}

        
      - name: If Format Was Successful, Commit Changes
        run: |
          echo "(*) Commiting Changes :arrow_double_down:" >> $GITHUB_STEP_SUMMARY
          git config --global user.email "gitbot@github.com"
          git config --global user.name "Github CI Bot"
          git add .
          if git commit -m "${{env.FMT_COMMIT_MSG}}"; then
            echo "(*) Successfully Commited Changes :100:" >> $GITHUB_STEP_SUMMARY
          else
            echo "(-) Failure Commiting Format Changes :bangbang:" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        if: success()

      - name: Clean Environment
        run: |
          cargo clean
      
      - name: Run Clippy
        id: run-clippy
        run: |
          cargo clippy --all-targets -- -D warnings
        continue-on-error: true

      - name: Parse Clippy Data
        run: |
          echo "Clippy failed :bangbang: ${{steps.run-clippy.outputs.stdout}}" >> ${{env.CLIPPY_RESULT}}
      
      - name: Catch Errors 
        run: |
          echo "### Exiting Because Clippy Warnings Were Found"
          exit 1
        if: failure()

      - name: Create PR Comments
        if: github.event_name == 'pull_request'
        run: |
            for file in ${{env.FMT_CHECK_RESULT}} ${{env.FMT_CODE_RESULT}} ${{env.CLIPPY_RESULT}}; do
              if [ -f "$file"]; then
                curl -X POST \
                  -H "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  -d "{\"body\": \"$(cat $file)\"}" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
              fi
            done

      - name: Delete Files
        run: |
          rm -rf ${{env.FMT_CHECK_RESULT}} ${{env.FMT_CODE_RESULT}} ${{env.CLIPPY_RESULT}}
      
      - name: Commit Changes
        run: |
          git add .
          git commit -m "${{env.FMT_COMMIT_MSG}}"
          
          